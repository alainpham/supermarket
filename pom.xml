<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>supermarket</groupId>
  <artifactId>supermarket-parent</artifactId>
  <version>${revision}</version>
  <packaging>pom</packaging>
  <modules>
    <module>markethub</module>
    <module>inventory</module>
    <module>ordermanager</module>
    <module>orderprocessing</module>
  </modules>
  <properties>
    <revision>1.0.0</revision>
    <spring.boot.version>3.4.1</spring.boot.version>
    <springdoc.openapi.version>2.7.0</springdoc.openapi.version>
    <opentelemetry.version>2.11.0</opentelemetry.version>
    <temurin.image.version>17.0.13_11-jre</temurin.image.version>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.target>17</maven.compiler.target>
    <maven.compiler.source>17</maven.compiler.source>
    <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
    <exec-maven-plugin.version>3.5.0</exec-maven-plugin.version>
    <otlp.endpoint>http://grafana-k8s-monitoring-alloy.agents.svc.cluster.local:4318</otlp.endpoint>
    <container.registry>alainpham</container.registry>
    <kube.ingress.root.domain>gkube.duckdns.org</kube.ingress.root.domain>
  </properties>
  <dependencyManagement>
    <dependencies>
      <!-- Spring Boot BOM -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <!-- base -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>${springdoc.openapi.version}</version>
    </dependency>
    <!-- database -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <!-- <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-rest</artifactId>
    </dependency> -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
    </dependency>
    <!-- fakeload -->
    <dependency>
      <groupId>com.martensigwart</groupId>
      <artifactId>fakeload</artifactId>
      <version>0.7.0</version>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
  </dependencies>
  <build>
    <defaultGoal>spring-boot:run</defaultGoal>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring.boot.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>rmi</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>rmi</argument>
                <argument>-f</argument>
                <argument>${project.artifactId}:${project.version}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>build</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>buildx</argument>
                <argument>build</argument>
                <argument>--load</argument>
                <argument>--progress=plain</argument>
                <argument>--build-arg</argument>
                <argument>PROJECT_ARTIFACTID=${project.artifactId}</argument>
                <argument>--build-arg</argument>
                <argument>PROJECT_VERSION=${project.version}</argument>
                <argument>--build-arg</argument>
                <argument>TEMURIN_IMAGE_VERSION=${temurin.image.version}</argument>
                <argument>--build-arg</argument>
                <argument>OPENTELEMETRY_VERSION=${opentelemetry.version}</argument>
                <argument>-f</argument>
                <argument>src/main/docker/Dockerfile</argument>
                <argument>-t</argument>
                <argument>${project.artifactId}:${project.version}</argument>
                <argument>.</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>tag</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>tag</argument>
                <argument>${project.artifactId}:${project.version}</argument>
                <argument>${container.registry}/${project.artifactId}:${project.version}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>push</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>push</argument>
                <argument>${container.registry}/${project.artifactId}:${project.version}</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>buildpush</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>buildx</argument>
                <argument>build</argument>
                <argument>--platform</argument>
                <argument>linux/amd64,linux/arm/v7,linux/arm64/v8</argument>
                <argument>--push</argument>
                <argument>--progress=plain</argument>
                <argument>--build-arg</argument>
                <argument>PROJECT_ARTIFACTID=${project.artifactId}</argument>
                <argument>--build-arg</argument>
                <argument>PROJECT_VERSION=${project.version}</argument>
                <argument>--build-arg</argument>
                <argument>TEMURIN_IMAGE_VERSION=${temurin.image.version}</argument>
                <argument>--build-arg</argument>
                <argument>OPENTELEMETRY_VERSION=${opentelemetry.version}</argument>
                <argument>-f</argument>
                <argument>src/main/docker/Dockerfile</argument>
                <argument>-t</argument>
                <argument>${container.registry}/${project.artifactId}:${project.version}</argument>
                <argument>.</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>kdelete</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>bash</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>-c</argument>
                <argument>envsubst &lt; src/main/kube/deploy.envsubst.yaml | kubectl delete -f -</argument>
              </arguments>
              <environmentVariables>
                <PROJECT_ARTIFACTID>${project.artifactId}</PROJECT_ARTIFACTID>
                <PROJECT_VERSION>${project.version}</PROJECT_VERSION>
                <CONTAINER_REGISTRY>${container.registry}</CONTAINER_REGISTRY>
                <OTLP_ENDPOINT>${otlp.endpoint}</OTLP_ENDPOINT>
                <KUBE_INGRESS_ROOT_DOMAIN>${kube.ingress.root.domain}</KUBE_INGRESS_ROOT_DOMAIN>
              </environmentVariables>
            </configuration>
          </execution>
          <execution>
            <id>kdeploy</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>bash</executable>
              <workingDirectory>${project.basedir}</workingDirectory>
              <arguments>
                <argument>-c</argument>
                <argument>envsubst &lt; src/main/kube/deploy.envsubst.yaml | kubectl apply -f -</argument>
              </arguments>
              <environmentVariables>
                <PROJECT_ARTIFACTID>${project.artifactId}</PROJECT_ARTIFACTID>
                <PROJECT_VERSION>${project.version}</PROJECT_VERSION>
                <CONTAINER_REGISTRY>${container.registry}</CONTAINER_REGISTRY>
                <OTLP_ENDPOINT>${otlp.endpoint}</OTLP_ENDPOINT>
                <KUBE_INGRESS_ROOT_DOMAIN>${kube.ingress.root.domain}</KUBE_INGRESS_ROOT_DOMAIN>
              </environmentVariables>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>dev-otel</id>
      <dependencies>
        <!-- observability with otel -->
        <dependency>
          <groupId>io.opentelemetry.javaagent</groupId>
          <artifactId>opentelemetry-javaagent</artifactId>
          <version>${opentelemetry.version}</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
              <environmentVariables>
                <JAVA_TOOL_OPTIONS>
                  -javaagent:${user.home}/.m2/repository/io/opentelemetry/javaagent/opentelemetry-javaagent/${opentelemetry.version}/opentelemetry-javaagent-${opentelemetry.version}.jar</JAVA_TOOL_OPTIONS>
                <OTEL_JAVAAGENT_ENABLED>true</OTEL_JAVAAGENT_ENABLED>
                <OTEL_METRICS_EXPORTER>prometheus</OTEL_METRICS_EXPORTER>
                <OTEL_INSTRUMENTATION_MICROMETER_ENABLED>true</OTEL_INSTRUMENTATION_MICROMETER_ENABLED>
                <OTEL_EXPORTER_PROMETHEUS_PORT>9090</OTEL_EXPORTER_PROMETHEUS_PORT>
                <OTEL_METRIC_EXPORT_INTERVAL>15000</OTEL_METRIC_EXPORT_INTERVAL>
                <OTEL_EXPORTER_OTLP_TIMEOUT>10000</OTEL_EXPORTER_OTLP_TIMEOUT>
                <OTEL_RESOURCE_ATTRIBUTES>
                  service.name=${project.artifactId},service.namespace=${project.artifactId}-ns,service.instance.id=${project.artifactId}-dev,service.version=${project.version}</OTEL_RESOURCE_ATTRIBUTES>
              </environmentVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
